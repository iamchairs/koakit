"use strict";
const reflect_1 = require('../reflect');
const response_1 = require('../response');
class InjectorService {
    static registerInjection(object, method, injectionConfig) {
        let injection = reflect_1.Reflect.getMetadata('Injection', object, method) || [];
        injection.push(injectionConfig);
        reflect_1.Reflect.defineMetadata('Injection', injection, object, method);
    }
    static run(object, method, context) {
        return new Promise((resolve, reject) => {
            let injection = reflect_1.Reflect.getMetadata('Injection', object, method) || [];
            this.resolveInjection(injection, context).then((response) => {
                if (response_1.ResponseService.isError(response)) {
                    throw response;
                }
                let methodResult = object[method].apply(object, response);
                if (methodResult instanceof Promise) {
                    return methodResult;
                }
                else {
                    return Promise.resolve(methodResult);
                }
            }).catch((response) => {
                reject(response_1.ResponseService.convertErrorResponse(response, object, method));
            }).then((response) => {
                if (response_1.ResponseService.isSuccess(response)) {
                    resolve(response_1.ResponseService.convertSuccessResponse(response, object, method));
                }
                else {
                    reject(response_1.ResponseService.convertErrorResponse(response, object, method));
                }
            });
        });
    }
    static resolveInjection(injection, context) {
        let returnPromises = [];
        injection.forEach((injectionConfig) => {
            returnPromises[injectionConfig.injectable.index] = injectionConfig.injectionResolver.resolve(injectionConfig.injectable, context);
        });
        return Promise.all(returnPromises).then((values) => {
            let returnValues = [];
            values.forEach((value) => {
                if (value instanceof response_1.Response) {
                    returnValues.push(value.data);
                }
                else {
                    returnValues.push(value);
                }
            });
            return returnValues;
        });
    }
}
exports.InjectorService = InjectorService;
