"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const route_1 = require('./route');
const error_1 = require('./error');
class Restkit {
    static initDefaultRestkitConfig(config) {
        this.config = config;
        config.port = config.port || 8000;
        config.timezone = config.timezone || 'Z';
        config.staticFiles = config.staticFiles || [];
        config.staticPaths = config.staticPaths || [];
        this.server = config.server;
        config.middleware = config.middleware || [];
    }
    static start(config) {
        return new Promise((resolve, reject) => {
            this.initDefaultRestkitConfig(config);
            process.env.TZ = config.timezone;
            this.resolveMiddleware(config.middleware).then((middlewares) => {
                this.bindMiddleware(middlewares);
                route_1.RouteManager.bindStaticPaths(this.server, config.staticPaths);
                route_1.RouteManager.bindStaticFiles(this.server, config.staticFiles);
                route_1.RouteManager.bindRoutes(this.server);
                this.server.listen(config.port, () => {
                    console.log(`Started server on port ${config.port}`);
                    resolve(config);
                });
            }).catch((err) => {
                reject(err);
            });
        }).catch((err) => {
            error_1.fatal(err);
        });
    }
    static resolveMiddleware(middlewares) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                let promises = [];
                middlewares.forEach((middleware) => {
                    if (middleware instanceof Promise) {
                        promises.push(middleware);
                    }
                    else {
                        promises.push(Promise.resolve(middleware));
                    }
                });
                Promise.all(promises).then((resolvedMiddleware) => {
                    resolve(resolvedMiddleware);
                }).catch((err) => {
                    reject(err);
                });
            });
        });
    }
    static bindMiddleware(middlewares) {
        return __awaiter(this, void 0, void 0, function* () {
            middlewares.forEach((middleware) => {
                if (middleware instanceof Array) {
                    this.bindMiddleware(middleware);
                }
                else {
                    this.server.use(middleware);
                }
            });
        });
    }
    static stop() {
        console.log('closed application');
        this.server.close();
    }
}
exports.Restkit = Restkit;
